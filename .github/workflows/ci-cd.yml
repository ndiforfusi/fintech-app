permissions:
  id-token: write
  contents: read

name: CI-CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'prod'
        type: choice
        options: [dev, qa, uat, prod]
      image_tag:
        description: 'Docker Image Tag (e.g., 1.0.0)'
        required: false

  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: 999568710647
  ECR_REPO: fintech-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    timeout-minutes: 60
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          source /etc/profile.d/maven.sh || true
          mvn clean package -DskipTests

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=fintech-app
            -Dsonar.projectName='fintech-app'
            -Dsonar.sources=.
            -Dsonar.java.binaries=target/classes

      - name: Fix Permissions After SonarQube
        run: sudo chown -R $USER:$USER .scannerwork || true

      - name: Set Image Tag
        id: set-tag
        run: |
          TAG=${{ github.event.inputs.image_tag }}
          if [ -z "$TAG" ]; then
            TAG=$(date +%Y%m%d%H%M%S)
            echo "Generated unique image tag: $TAG"
          else
            echo "Using provided image tag: $TAG"
          fi
          echo "image-tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          echo "üî® Building Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          echo "üì§ Pushing Docker image..."
          docker push $IMAGE_URI

      - name: Clean Up Local Docker Images
        if: always()
        run: |
          IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          echo "üßπ Cleaning up Docker image: $IMAGE_URI"
          docker rmi -f $IMAGE_URI || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f || true
          docker volume prune -f || true

      - name: Notify Slack (‚úÖ Build Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Build Succeeded* by `${{ github.actor }}` in `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (‚ùå Build Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå *Build Failed* by `${{ github.actor }}` in `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: Deploy to EKS
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Notify Slack (üöÄ Starting Deployment)
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ *Deployment started* in `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Configure kubectl via AWS CLI
        run: |
          CLUSTER_NAME=${{ github.event.inputs.environment || 'prod' }}-dominion-cluster
          aws eks update-kubeconfig --region $AWS_REGION --name "$CLUSTER_NAME"

      - name: Verify EKS Access
        run: |
          kubectl get nodes || {
            echo "‚ùå Unable to authenticate with EKS cluster."
            exit 1
          }

      - name: Install EKS Add-ons
        run: |
          chmod +x eks_addons/script/helm_install.sh eks_addons/script/helm_charts.sh
          ./eks_addons/script/helm_install.sh
          ./eks_addons/script/helm_charts.sh

      - name: Deploy Monitoring and Logging
        run: |
          kubectl apply -k ./eks_addons/monitoring
          kubectl apply -k ./eks_addons/elk

      - name: Deploy Application via Kustomize
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          OVERLAY_DIR=./k8s/overlays/$ENV

          echo "üîß Deploying to: $ENV"
          echo "üì¶ Using Docker image: $IMAGE_URI"

          if [ ! -d "$OVERLAY_DIR" ]; then
            echo "‚ùå Overlay directory $OVERLAY_DIR not found!"
            exit 1
          fi

          cd "$OVERLAY_DIR"
          kustomize edit set image $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO=$IMAGE_URI
          cd -

          kubectl apply -k "$OVERLAY_DIR"

      - name: Notify Slack (‚úÖ Deploy Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Deployment Successful* to `${{ github.event.inputs.environment || 'prod' }}` by `${{ github.actor }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (üî• Deploy Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üî• *Deployment FAILED* to `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
